import com.adyen.sdk.Service
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'adyen.sdk-automation-conventions'
}

project.ext {
    generator = 'csharp-netcore'
    templates = 'templates/csharp'
}

def services = project.ext.services as List<Service>

services.each { Service svc ->
    def serviceName = project.ext.serviceNaming[svc.id] as String

    // Generation
    tasks.named("generate${svc.name}", GenerateTask) {
        apiPackage.set(svc.small ? 'Service' : "Service.${svc.name}")
        apiNameSuffix.set('Service')
        modelPackage.set("Model.${svc.name}")
        reservedWordsMappings.put('Version', 'Version')
        additionalProperties.putAll([
                'packageName': 'Adyen',
                'serviceName': serviceName,
        ])
    }

    // Deployment
    def deployModels = tasks.register("deploy${svc.name}Models", Sync) {
        group 'deploy'
        description "Deploy $svc.name models into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }

        from layout.buildDirectory.dir("services/$svc.id/src/wangzunjiao/Model.${serviceName}")
        into layout.projectDirectory.dir("repo/wangzunjiao/Model/" + serviceName)
    }

    def deployServices = tasks.register("deploy${svc.name}Services", Sync) {
        group 'deploy'
        description "Deploy $svc.name into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }

        from layout.buildDirectory.dir("services/$svc.id/src/wangzunjiao/Service.${serviceName}")
        into layout.projectDirectory.dir("repo/wangzunjiao/Service/" + serviceName)
    }

    def deploySmallService = tasks.register("deploy${svc.name}SmallService", Copy) {
        group 'deploy'
        description "Copy $svc.name into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }

        from layout.buildDirectory.file("services/$svc.id/src/wangzunjiao/Service/DefaultService.cs")
        rename 'DefaultService.cs', "${serviceName}Service.cs"
        filter {
            it.replace('DefaultService', "${serviceName}Service")
        }
        into layout.projectDirectory.dir("repo/wangzunjiao/Service")
    }

    tasks.named(svc.id) { dependsOn deployModels, deployServices, deploySmallService }
}

// Tests
tasks.named('binlookup') {
    doLast {
        assert file("${layout.projectDirectory}/repo/wangzunjiao/Model/BinLookup/Amount.cs").exists()
        assert file("${layout.projectDirectory}/repo/wangzunjiao/Service/BinLookupService.cs").exists()
    }
}
tasks.named('checkout') {
    doLast {
        assert file("${layout.projectDirectory}/repo/wangzunjiao/Model/Checkout/Amount.cs").exists()
        assert file("${layout.projectDirectory}/repo/wangzunjiao/Service/Checkout/PaymentsService.cs").exists()
    }
}
tasks.named('acswebhooks') {
    doLast {
        assert file("${layout.projectDirectory}/repo/wangzunjiao/Model/AcsWebhooks/Amount.cs").exists()
        assert !file("${layout.projectDirectory}/repo/wangzunjiao/Service/AcsWebhooks").exists()
        assert !file("${layout.projectDirectory}/repo/wangzunjiao/Service/AcsWebhooksService.cs").exists()
    }
}
