import com.adyen.sdk.Service
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'adyen.sdk-automation-conventions'
}

project.ext {
    generator = 'python'
    removeTags = false
}

List<Service> services = project.ext.services
services.find { it.id == 'payment' }.small = false

// Service renaming
Map<String, String> serviceNaming = project.ext.serviceNamingCamel
serviceNaming.putAll([
        'binlookup'            : 'binlookup',
        'payment'              : 'payments',
        'posterminalmanagement': 'terminal',
        'payout'               : 'payouts'
])

services.<Service> each { Service svc ->
    String serviceName = serviceNaming[svc.id]

    // Generation
    tasks.named("generate${svc.name}", GenerateTask) {
        engine.set('mustache')
        configFile.set("$projectDir/config.yaml")
        additionalProperties.putAll([
                'serviceName': serviceName,
        ])
    }

    // Deployment
    def deployServices = tasks.register("deploy${svc.name}Services", Sync) {
        group 'deploy'
        description "Deploy $svc.name into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }
        onlyIf { !svc.small && !svc.webhook }

        from layout.buildDirectory.dir("services/$svc.id/openapi_client/api")
        include '*_api.py'
        into layout.projectDirectory.dir("repo/Adyen/services/" + serviceName)

        from(layout.buildDirectory.dir("services/$svc.id/api")) {
            include 'api-single.py'
            rename 'api-single.py', '__init__.py'
        }
    }

    def deploySmallService = tasks.register("deploy${svc.name}SmallService", Copy) {
        group 'deploy'
        description "Copy $svc.name into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }
        onlyIf { svc.small }

        from layout.buildDirectory.file("services/$svc.id/openapi_client/api/general_api-small.py")
        rename 'general_api-small.py', "${serviceName}.py"
        into layout.projectDirectory.dir("repo/Adyen/services")
    }

    tasks.named(svc.id) { dependsOn deployServices, deploySmallService }
}

// Tests
tasks.named('checkout') {
    doLast {
        assert file("${layout.projectDirectory}/repo/Adyen/services/checkout/payments_api.py").exists()
        assert file("${layout.projectDirectory}/repo/Adyen/services/checkout/__init__.py").exists()
    }
}
tasks.named('binlookup') {
    doLast {
        assert file("${layout.projectDirectory}/repo/Adyen/services/binlookup.py").exists()
        assert !file("${layout.projectDirectory}/repo/Adyen/services/binlookup").exists()
    }
}
