import com.adyen.sdk.Service
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'adyen.sdk-automation-conventions'
}

project.ext {
    generator = 'go'
    templates = 'templates/custom'
    configFile = 'templates/config.yaml'
    removeTags = false
}

def services = project.ext.services as List<Service>

// Service renaming
tasks.named('generatePosTerminalManagement', GenerateTask) {
    project.ext.serviceName = 'PosTerminalManagementApi'
    additionalProperties.set([
            'serviceName': 'PosTerminalManagementApi',
    ])
}
tasks.named('generateLegalEntityManagement', GenerateTask) {
    project.ext.serviceName = 'LegalEntity'
    additionalProperties.set([
            'serviceName': 'LegalEntity',
    ])
}
tasks.named('generatePayout', GenerateTask) {
    additionalProperties.set([
            'serviceName': '',
    ])
}
tasks.named('generatePayment', GenerateTask) {
    additionalProperties.set([
            'serviceName': '',
    ])
}

tasks.withType(GenerateTask).configureEach {
    enablePostProcessFile.set(true)
    globalProperties.set([
            'apis'           : '',
            'models'         : '',
            'supportingFiles': 'client.go',
            'apiTests'       : 'false',
            'apiDocs'        : 'false',
            'modelDocs'      : 'false'
    ])
}

// Deployment
services.each { Service svc ->
    def generateTask = "generate$svc.name"
    def deploy = tasks.register("deploy$svc.name", Copy) {
        group 'deploy'
        description "Copy $svc.name files into the repo."
        dependsOn generateTask
        outputs.upToDateWhen { false }

        // delete existing services and models
        doFirst {
            delete layout.projectDirectory.dir("repo/src/$svc.id")
        }

        from layout.buildDirectory.dir("services/$svc.id")
        include "**/*"
        into layout.projectDirectory.dir("repo/src/$svc.id")
    }

    tasks.named(svc.id) { dependsOn deploy }

    tasks.named(generateTask, GenerateTask) {
        packageName.set(svc.id)
    }
}

tasks.named('generatePayment', GenerateTask) {
    packageName.set('payments')
}

tasks.named('generateLegalEntityManagement', GenerateTask) {
    packageName.set('legalentity')
}

// Generate and rename webhooks
services.findAll { it.name.endsWith('Webhooks') }.each { Service svc ->
    def singular = svc.id.dropRight(1)  // drop s (e.g. from AcsWebhooks to AcsWebhook)
    tasks.named("generate${svc.name}", GenerateTask) { packageName.set(singular) }
    tasks.named("deploy${svc.name}", Copy) {
        def targetDir = layout.projectDirectory.dir("repo/src/${singular}")
        // Drop content first (except webhook_handler.go)
        targetDir.asFile.listFiles().each { file ->
            if (file.name != 'webhook_handler.go') {
                file.delete()
            }
        }
        into targetDir // Copy models
    }
}

tasks.named('deployLegalEntityManagement', Copy) {
    into layout.projectDirectory.dir("repo/src/legalentity")
}

tasks.named('deployPayment', Copy) {
    into layout.projectDirectory.dir("repo/src/payments")
}

// Small services (skip client.go as single class service does not need an "index" to group multiple tags)
services.findAll({ it.small }).each { Service svc ->
    tasks.named("deploy${svc.name}", Copy) {
        exclude 'client.go'
    }
}

// Webhooks (skip client.go and copy models only)
services.findAll({ it.name.endsWith('Webhooks') }).each { Service svc ->
    tasks.named("deploy${svc.name}", Copy) {
        exclude 'client.go'
    }
}

// Services with a RestServiceError model
['generateBalancePlatform', 'generateTransfers', 'generateManagement'].each {
    tasks.named(it, GenerateTask) {
        additionalProperties.put('hasRestServiceError', 'true')
    }
}

// Test small services
tasks.named('binlookup') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/binlookup/model_amount.go").exists()
        assert !file("${layout.projectDirectory}/repo/src/binlookup/api_default.go").exists()
        assert file("${layout.projectDirectory}/repo/src/binlookup/api_general.go").exists()
    }
}
// Test services
tasks.named('checkout') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/checkout/model_amount.go").exists()
        assert !file("${layout.projectDirectory}/repo/src/checkout/api_default.go").exists()
        assert file("${layout.projectDirectory}/repo/src/checkout/api_donations.go").exists()
    }
}
// Test webhooks
tasks.named('acswebhooks') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/acswebhook/model_amount.go").exists()
        assert !file("${layout.projectDirectory}/repo/src/checkout/api_default.go").exists()
    }
}
