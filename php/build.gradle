import com.adyen.sdk.Service
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'adyen.sdk-automation-conventions'
}

project.ext {
    removeTags = false
}

def services = project.ext.services as List<Service>
def smallServices = project.ext.smallServices as List<Service>
def serviceNaming = project.ext.serviceNaming as Map<String, String>

// Service renaming
serviceNaming.putAll([
        'payment'              : 'Payments',
        'posterminalmanagement': 'POSTerminalManagement'
])

tasks.withType(GenerateTask).configureEach {
    def serviceName = serviceNaming[ext.serviceId as String]
    modelPackage.set("Model\\${serviceName}")
    apiPackage.set("Service\\${serviceName}")
    additionalProperties.putAll([
            'variableNamingConvention': 'camelCase',
            'invokerPackage'          : 'Adyen',
            'packageName'             : 'Adyen'
    ])
}

smallServices.each { Service svc ->
    tasks.named("generate${svc.name}", GenerateTask) {
        apiPackage.set("Service")
    }
}

// Deployment
services.findAll({ !it.small }).each { Service svc ->
    def deploy = tasks.register("deploy$svc.name", Copy) {
        group 'deploy'
        description "Copy $svc.name files into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }

        // Cleanup existing non-small Models and Services before generation
        doFirst {
            logger.lifecycle("Cleaning up existing files for $svc.name")
            delete layout.projectDirectory.dir("repo/src/Adyen/Service/$svc.name")
            delete layout.projectDirectory.dir("repo/src/Adyen/Model/$svc.name")
        }

        // Set the destination directory for copied files
        into layout.projectDirectory.dir("repo/src/Adyen")
        def sourcePath = "services/$svc.id/lib"

        // Copy generated Model and Service PHP files
        from(layout.buildDirectory.dir(sourcePath)) {
            include "Model/**/*.php"
            include "Service/**/*.php"
        }

        // Copy ObjectSerializer.php to the specific model directory
        from(layout.buildDirectory.file("$sourcePath/ObjectSerializer.php")) {
            into "Model/" + serviceNaming[svc.id]
        }
    }

    tasks.named(svc.id) { dependsOn deploy }
}

// Deployment tasks for small services
smallServices.each { Service svc ->
    def serviceName = serviceNaming[svc.id]
    def deploy = tasks.register("deploy$svc.name", Copy) {
        group 'deploy'
        description "Copy $svc.name files into the repo."
        dependsOn "generate$svc.name"
        outputs.upToDateWhen { false }

        into layout.projectDirectory.dir("repo/src/Adyen")

        // Service
        def clazzName = "${serviceName}Api"
        from(layout.buildDirectory.file("services/$svc.id/lib/Service/GeneralApi.php")) {
            rename 'GeneralApi.php', "${clazzName}.php"
            filter {
                it.replace('class GeneralApi', "class ${clazzName}")
                        .replace('GeneralApi constructor', "${clazzName} constructor")
            }
            into "Service"
        }

        // Models
        from(layout.buildDirectory.dir("services/$svc.id/lib/Model")){
            include '**/*.php'
            into "Model"
        }

        // Serializer
        from(layout.buildDirectory.file("services/$svc.id/lib/ObjectSerializer.php")) {
            into "Model/" + serviceName
        }
    }

    tasks.named(svc.id) { dependsOn deploy }
}

// Tests
tasks.named('binlookup') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/Adyen/Model/BinLookup/Amount.php").exists()
        assert file("${layout.projectDirectory}/repo/src/Adyen/Service/BinLookupApi.php").exists()
    }
}
tasks.named('deployAcsWebhooks', Copy) {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/Adyen/Model/AcsWebhooks/Amount.php").exists()
        assert file("${layout.projectDirectory}/repo/src/Adyen/Model/AcsWebhooks/ObjectSerializer.php").exists()
    }
}
tasks.named('deployCheckout') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/Adyen/Model/Checkout/Amount.php").exists()
        assert file("${layout.projectDirectory}/repo/src/Adyen/Service/Checkout/PaymentsApi.php").exists()
    }
}
tasks.named('payment') {
    doLast {
        assert file("${layout.projectDirectory}/repo/src/Adyen/Model/Payments/Amount.php").exists()
        assert file("${layout.projectDirectory}/repo/src/Adyen/Model/Payments/ObjectSerializer.php").exists()
        assert file("${layout.projectDirectory}/repo/src/Adyen/Service/Payments/PaymentsApi.php").exists()
    }
}