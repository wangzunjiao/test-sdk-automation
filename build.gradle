import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def uri = "https://github.com/wangzunjiao/adyen-openapi.git"
def specsDir = "$projectDir/schema"
def checkoutDir = "$projectDir/schema/json/CheckoutService-v71.json"

tasks.register('specs', Exec) {
    group 'setup'
    description 'Clone OpenAPI spec (and apply local patches).'
    commandLine 'git', 'clone', '--depth', '2', uri, specsDir
    outputs.dir specsDir
    onlyIf { !file(specsDir).exists() }
    doLast {
        File folder = new File("$specsDir/json");
        assert folder.exists()
        assert folder.isDirectory()
        assert folder.list().length > 0: "Folder cannot be empty after clone"
        file(folder).eachFile { specFile ->
            if (specFile.name.endsWith('.json')) {
                def json = new JsonSlurper().parseText(specFile.text)
                // Modify the 'openapi' field
                json.openapi = '3.0.0'

                json["paths"].each { Map.Entry endpoint ->
                    endpoint.value.each { Map.Entry httpMethod ->
                        // overwrite operationId
                        httpMethod.value["operationId"] = httpMethod.value["x-methodName"]
                    }
                }

                // Overwrite the file with updated content
                specFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
            }
        }
    }
}

tasks.register('pmTable', Task) {
    group 'specs'
    description 'Generate Checkout Payment Method Table'
    dependsOn('specs')
    onlyIf { file(checkoutDir).exists() }
    File folder = new File(checkoutDir);
    doLast {
        def json = new JsonSlurper().parseText(file(folder).text)
        def base = json.components.schemas
        def pmList = new HashMap<String, ArrayList<String>>()

        // find list of PaymentMethod Classes
        base.'PaymentRequest'.'properties'.'paymentMethod'.'oneOf'.each {
            pmClass -> pmList.put(pmClass.'$ref'.replace('#/components/schemas/', ''), new ArrayList())
        }
        // populate available tx variants per PaymentMethodDetailsClass
        pmList.each {
            entry ->
                def keyString = entry.getKey()
                base."$keyString".'properties'.'type'.'enum'.each {
                    pm -> entry.getValue().add(pm)
                }
        }
        outputs.println(pmList)

        // Output the list into a .md file
        def pmFile = new File("$projectDir/PaymentMethodOverview.md")
        new FileWriter(pmFile).with {
            write("# PaymentMethod Overview For Checkout\n" +
                    "| Java Class    | tx_variants   |\n" +
                    "|---------------|---------------|\n")
            pmList.each {
                entry ->
                    write("|$entry.key|$entry.value|\n")
            }
            flush()
        }
        pmFile.createNewFile()
    }
}

tasks.register('cleanSpecs', Delete) {
    group 'clean'
    description 'Delete OpenAPI specifications'
    delete specsDir
}
