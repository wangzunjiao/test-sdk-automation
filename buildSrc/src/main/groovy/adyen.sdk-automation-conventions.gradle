plugins {
    id 'org.openapi.generator'
}

import com.adyen.sdk.Service
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

List<Service> services = [
        // Payments
        new Service(name: 'Checkout', version: 71),
        new Service(name: 'Payout', version: 68),
        new Service(name: 'Recurring', version: 68, small: true),
        new Service(name: 'BinLookup', version: 54, small: true),
        new Service(name: 'PosMobile', spec: 'SessionService', version: 68, small: true), 
        new Service(name: 'PaymentsApp', spec: 'PaymentsAppService', version: 1, small: true),
        // Point of Sale
        new Service(name: 'PosTerminalManagement', spec: 'TfmAPIService', version: 1, small: true),
        // Management
        new Service(name: 'Management', version: 3),
        new Service(name: 'BalanceControl', version: 1, small: true),
        // Adyen for Platforms
        new Service(name: 'LegalEntityManagement', spec: 'LegalEntityService', version: 3),
        new Service(name: 'BalancePlatform', version: 2),
        new Service(name: 'Transfers', spec: 'TransferService', version: 4),
        new Service(name: 'DataProtection', version: 1, small: true),
        // Classic Payments
        new Service(name: 'Payment', version: 68, small: true),
        // Others
        new Service(name: 'StoredValue', version: 46, small: true),
        new Service(name: 'Disputes', spec: 'DisputeService', version: 30, small: true),
        // Webhooks
        new Service(name: 'ConfigurationWebhooks', spec: 'BalancePlatformConfigurationNotification', version: 2),
        new Service(name: 'AcsWebhooks', spec: 'BalancePlatformAcsNotification', version: 1),
        new Service(name: 'ReportWebhooks', spec: 'BalancePlatformReportNotification', version: 1),
        new Service(name: 'TransferWebhooks', spec: 'BalancePlatformTransferNotification', version: 4),
        new Service(name: 'TransactionWebhooks', spec: 'BalancePlatformTransactionNotification', version: 4),
        new Service(name: 'ManagementWebhooks', spec: 'ManagementNotificationService', version: 3)
]

ext {
    generator = java
    templates = 'templates'
    serviceName = ''
    removeTags = true
    setProperty('services', services)
    smallServices = services.findAll { it.small }
    serviceNaming = services.collectEntries { [it.id, it.name] }
    serviceNamingCamel = services.collectEntries {
        [it.id, it.name.substring(0, 1).toLowerCase() + it.name.substring(1)]
    }
}

// Generate a full client for each service
services.each { Service svc ->
    def generate = tasks.register("generate$svc.name", GenerateTask) {
        group 'generate'
        description "Generate a java client for $svc.name."
        dependsOn 'cloneRepo'
        dependsOn ':specs'

        // Current service being processed
        ext.serviceId = svc.id
        project.ext.serviceName = svc.name

        generatorName.set(project.ext.generator as String)
        inputSpec.set("$rootDir/schema/json/${svc.filename}")
        outputDir.set("$buildDir/services/${svc.id}")
        templateDir.set("$projectDir/repo/$project.ext.templates")
        engine.set('mustache')
        validateSpec.set(false)
        skipValidateSpec.set(true)
        reservedWordsMappings.set([
                "configuration": "configuration"
        ])
        additionalProperties.set([
                'serviceName': project.ext.serviceName,
        ])
        globalProperties.set([
                'modelDocs' : 'false',
                'modelTests': 'false'
        ])

        if (project.ext.has('configFile')) {
            configFile.set("$projectDir/repo/$project.ext.configFile")
        }
    }

    tasks.register(svc.id) {
        group 'service'
        description "Base task for $svc.name."
        dependsOn generate
    }
}

tasks.register('services') {
    description 'Generate code for multiple services.'
    dependsOn services.collect { it.id }
}

tasks.named('generateCheckout', GenerateTask) {
    if (project.name == 'node') {
        // generator v5 does not support inlineSchemaNameMappings
        return
    }
    inlineSchemaNameMappings.set([
            'PaymentRequest_paymentMethod'        : 'CheckoutPaymentMethod',
            'DonationPaymentRequest_paymentMethod': 'DonationPaymentMethod',
    ])
}

tasks.register('cloneRepo', Exec) {
    group 'setup'
    def uri = "https://github.com/wangzunjiao/test-java-api-library.git"
    def dest = 'repo'
    description "Clone this project's repository."
    commandLine 'git', 'clone', uri, '--single-branch', dest
    outputs.dir dest
    onlyIf { !file(dest).exists() }
}

// Disable generator caching
tasks.withType(GenerateTask).configureEach {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
}

tasks.register('cleanRepo', Delete) {
    group 'clean'
    description 'Clean this project state'
    delete layout.buildDirectory
    doLast {
        exec {
            // cleanTracked: discard changes to existing files
            commandLine 'git', 'checkout', '.'
            workingDir 'repo'
        }
        exec {
            // cleanUntracked: discard unknown files
            commandLine 'git', 'clean', '-f', '-d'
            workingDir 'repo'
        }
    }
}

tasks.register('addPMTable', Copy) {
    dependsOn("cloneRepo")
    dependsOn(":pmTable")
    from(rootProject.file('PaymentMethodOverview.md'))
    into layout.projectDirectory.dir("repo")
}

project.ext.smallServices.each { Service svc ->
    def ungroup = tasks.register("ungroup${svc.name}") {
        group 'specs'
        description "Remove tags from ${svc.name}"
        dependsOn ':specs'
        // The `removeTags` setting only works in isolation (e.g. CI). Locally, specs are shared between all projects.
        onlyIf { project.ext.removeTags }
        doLast {
            def specFile = file("$rootDir/schema/json/${svc.filename}")
            def json = new JsonSlurper().parse(specFile)

            json["paths"].each { Map.Entry endpoint ->
                endpoint.value.each { Map.Entry httpMethod ->
                    httpMethod.value.remove('tags')
                }
            }

            specFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
        }
    }

    tasks.named("generate$svc.name") { dependsOn ungroup }
}
